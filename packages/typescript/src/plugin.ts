// oxlint-disable arrow-body-style
import { TAtscriptPlugin } from '@atscript/core'
import { TypeRenderer, JsRenderer } from './codegen'
import path from 'path'
import { escapeQuotes, wrapProp } from './codegen/utils'

export interface TTsPluginOptions {
  /**
   * Render JSON schemas at build-time
   */
  preRenderJsonSchema?: boolean
}

export const tsPlugin: (opts?: TTsPluginOptions) => TAtscriptPlugin = opts => {
  return {
    name: 'typesccript',
    render(doc, format) {
      if (format === 'dts') {
        return [
          {
            fileName: `${doc.name}.d.ts`,
            content: new TypeRenderer(doc, opts).render(),
          },
        ]
      }
      if (format === 'js') {
        return [
          {
            fileName: `${doc.name}.js`,
            content: new JsRenderer(doc, opts).render(),
          },
        ]
      }
    },

    async buildEnd(output, format, repo) {
      if (format === 'dts') {
        // render atscript.d.ts
        const annotations = await repo.getUsedAnnotations()
        const tags = (await repo.getPrimitivesTags()) || new Set()
        let rendered = [] as string[]
        for (const [key, val] of Object.entries(annotations)) {
          const multiple = val!.multiple
          let typeLine = Array.from(val!.types)
            .map(t => {
              if (t.type === 'object') {
                return `{ ${Object.entries(t.props)
                  .map(([k, v]) => `${wrapProp(k)}${v.optional ? '?' : ''}: ${v.type}`)
                  .join(', ')} }`
              } else {
                return t.optional ? `${t.type} | true` : t.type
              }
            })
            .join(' | ')
          rendered.push(
            `${wrapProp(key)}: ${multiple ? '(' : ''}${typeLine}${multiple ? ')[]' : ''}`
          )
        }
        let renderedTags = Array.from(tags)
          .map(f => `"${escapeQuotes(f)}"`)
          .join(' | ')
        output.push({
          content:
            '// prettier-ignore-start\n' +
            '/* eslint-disable */\n' +
            '/**\n' +
            ' * ðŸª„ This file was generated by Atscript\n' +
            ' * It is generated based on annotations used in this project\n' +
            ' * Do not edit this file!\n' +
            ' *\n' +
            ' * Use `npx asc -f dts` command to re-generate this file\n' +
            ' */\n' +
            'export {}\n\n' +
            'declare global {\n' +
            '  interface AtscriptMetadata {\n    ' +
            rendered.join('\n    ') +
            '\n  }\n' +
            '  type AtscriptPrimitiveTags = ' +
            renderedTags +
            '\n' +
            '}\n' +
            '// prettier-ignore-end',
          fileName: 'atscript.d.ts',
          source: '',
          target: path.join(repo.root, 'atscript.d.ts'),
        })
      }
    },
  } as TAtscriptPlugin
}
