import { defineAnnotatedType as $ } from "@anscript/typescript/runtime"

export class PublicInterface {}
$("object", PublicInterface)
  .prop(
    "primitive",
    $()
      .designType("string")
      .type(String)
      .$type
  ).prop(
    "pirmiitiveUn",
    $("union")
      .item($()
          .designType("string")
          .type(String)
          .$def)
      .item($()
          .designType("number")
          .type(Number)
          .$def)
      .$type
  ).prop(
    "interger",
    $()
      .designType("number")
      .type(Number)
      .$type
  ).prop(
    "literal",
    $()
      .designType("string")
      .type(String)
      .value("value")
      .$type
  ).prop(
    "number",
    $()
      .designType("number")
      .type(Number)
      .value(5)
      .$type
  ).prop(
    "tuple1",
    $("tuple")
      .item($()
          .designType("string")
          .type(String)
          .$def)
      .$type
  ).prop(
    "tuple2",
    $("tuple")
      .item($()
          .designType("string")
          .type(String)
          .$def)
      .item($()
          .designType("string")
          .type(String)
          .$def)
      .$type
  ).prop(
    "tupleArray",
    $("array")
      .of($("tuple")
          .item($()
              .designType("string")
              .type(String)
              .$def)
          .item($()
              .designType("string")
              .type(String)
              .$def)
          .$def)
      .$type
  ).prop(
    "array",
    $("array")
      .of($()
          .designType("string")
          .type(String)
          .$def)
      .$type
  ).prop(
    "array2",
    $("array")
      .of($("array")
          .of($()
              .designType("string")
              .type(String)
              .$def)
          .$def)
      .$type
  ).prop(
    "array3",
    $("array")
      .of($("array")
          .of($("array")
              .of($()
                  .designType("string")
                  .type(String)
                  .$def)
              .$def)
          .$def)
      .$type
  ).prop(
    "complexArray",
    $("array")
      .of($("union")
          .item($()
              .designType("string")
              .type(String)
              .$def)
          .item($()
              .designType("number")
              .type(Number)
              .$def)
          .$def)
      .$type
  ).prop(
    "complexArray2",
    $("array")
      .of($("array")
          .of($("union")
              .item($()
                  .designType("string")
                  .type(String)
                  .$def)
              .item($()
                  .designType("number")
                  .type(Number)
                  .$def)
              .$def)
          .$def)
      .$type
  ).prop(
    "complexArray3",
    $("array")
      .of($("array")
          .of($("array")
              .of($("union")
                  .item($()
                      .designType("string")
                      .type(String)
                      .$def)
                  .item($()
                      .designType("number")
                      .type(Number)
                      .$def)
                  .$def)
              .$def)
          .$def)
      .$type
  ).prop(
    "complexArray4",
    $("union")
      .item($()
          .designType("string")
          .type(String)
          .$def)
      .item($("array")
          .of($()
              .designType("number")
              .type(Number)
              .$def)
          .$def)
      .$type
  ).prop(
    "complexArray5",
    $("union")
      .item($("array")
          .of($()
              .designType("string")
              .type(String)
              .$def)
          .$def)
      .item($()
          .designType("number")
          .type(Number)
          .$def)
      .$type
  ).prop(
    "object",
    $("object")
      .prop(
        "prop1",
        $()
          .designType("string")
          .type(String)
          .$type
      ).prop(
        "prop2",
        $()
          .designType("number")
          .type(Number)
          .$type
      ).prop(
        "nested",
        $("object")
          .prop(
            "prop3",
            $()
              .designType("boolean")
              .type(Boolean)
              .$type
          ).prop(
            "prop4",
            $()
              .designType("boolean")
              .type(Boolean)
              .$type
          )
          .$type
      )
      .$type
  ).prop(
    "optional",
    $()
      .designType("string")
      .type(String)
      .$type
  ).prop(
    "objectUnion1",
    $("union")
      .item($("object")
          .prop(
            "a",
            $()
              .designType("string")
              .type(String)
              .value("a")
              .$type
          )
          .$def)
      .item($()
          .designType("string")
          .type(String)
          .$def)
      .$type
  ).prop(
    "objectUnion2",
    $("union")
      .item($()
          .designType("string")
          .type(String)
          .$def)
      .item($("object")
          .prop(
            "a",
            $()
              .designType("string")
              .type(String)
              .value("a")
              .$type
          )
          .$def)
      .$type
  ).prop(
    "objectIntersection",
    $("intersection")
      .item($("object")
          .prop(
            "a",
            $()
              .designType("string")
              .type(String)
              .value("a")
              .$type
          )
          .$def)
      .item($("object")
          .prop(
            "b",
            $()
              .designType("string")
              .type(String)
              .value("b")
              .$type
          )
          .$def)
      .$type
  ).prop(
    "grouping",
    $("union")
      .item($()
          .designType("string")
          .type(String)
          .$def)
      .item($("union")
          .item($("intersection")
              .item($("intersection")
                  .item($()
                      .designType("number")
                      .type(Number)
                      .$def)
                  .item($()
                      .designType("boolean")
                      .type(Boolean)
                      .$def)
                  .$def)
              .item($("object")
                  .prop(
                    "a",
                    $()
                      .designType("string")
                      .type(String)
                      .value("b")
                      .$type
                  )
                  .$def)
              .$def)
          .item($()
              .designType("string")
              .type(String)
              .value("c")
              .$def)
          .$def)
      .$type
  )
