// prettier-ignore-start
/* eslint-disable */
/// <reference path="./type.as" />
/**
 * ðŸª„ This file was generated by Atscript
 * Do not edit this file!
 */

import type { TAtscriptTypeObject, TAtscriptTypeComplex, TAtscriptTypeFinal, TAtscriptTypeArray, TMetadataMap, Validator, TAtscriptAnnotatedTypeConstructor, TValidatorOptions } from "@atscript/typescript"

/**
 * Atscript type **TPrimitive**
 * @see {@link ./type.as:1:13}
 */
export type TPrimitive = string
declare namespace TPrimitive {
  const __is_atscript_annotated_type: true
  const type: TAtscriptTypeFinal
  const metadata: TMetadataMap<AtscriptMetadata>
  static validator: <TT extends TAtscriptAnnotatedTypeConstructor = TPrimitive>(opts?: TValidatorOptions) => Validator<TT>
}

/**
 * Atscript type **TPirmiitiveUn**
 * @see {@link ./type.as:3:13}
 */
export type TPirmiitiveUn = string | number
declare namespace TPirmiitiveUn {
  const __is_atscript_annotated_type: true
  const type: TAtscriptTypeComplex
  const metadata: TMetadataMap<AtscriptMetadata>
  static validator: <TT extends TAtscriptAnnotatedTypeConstructor = TPirmiitiveUn>(opts?: TValidatorOptions) => Validator<TT>
}

/**
 * Atscript type **TLiteral**
 * @see {@link ./type.as:5:13}
 */
export type TLiteral = "value"
declare namespace TLiteral {
  const __is_atscript_annotated_type: true
  const type: TAtscriptTypeDef
  const metadata: TMetadataMap<AtscriptMetadata>
  static validator: <TT extends TAtscriptAnnotatedTypeConstructor = TLiteral>(opts?: TValidatorOptions) => Validator<TT>
}

/**
 * Atscript type **TNumber**
 * @see {@link ./type.as:7:13}
 */
export type TNumber = 5
declare namespace TNumber {
  const __is_atscript_annotated_type: true
  const type: TAtscriptTypeDef
  const metadata: TMetadataMap<AtscriptMetadata>
  static validator: <TT extends TAtscriptAnnotatedTypeConstructor = TNumber>(opts?: TValidatorOptions) => Validator<TT>
}

/**
 * Atscript type **TTuple1**
 * @see {@link ./type.as:9:13}
 */
export type TTuple1 = [string]
declare namespace TTuple1 {
  const __is_atscript_annotated_type: true
  const type: TAtscriptTypeComplex
  const metadata: TMetadataMap<AtscriptMetadata>
  static validator: <TT extends TAtscriptAnnotatedTypeConstructor = TTuple1>(opts?: TValidatorOptions) => Validator<TT>
}

/**
 * Atscript type **TTuple2**
 * @see {@link ./type.as:11:13}
 */
export type TTuple2 = [string, string]
declare namespace TTuple2 {
  const __is_atscript_annotated_type: true
  const type: TAtscriptTypeComplex
  const metadata: TMetadataMap<AtscriptMetadata>
  static validator: <TT extends TAtscriptAnnotatedTypeConstructor = TTuple2>(opts?: TValidatorOptions) => Validator<TT>
}

/**
 * Atscript type **TTupleArray**
 * @see {@link ./type.as:13:13}
 */
export type TTupleArray = [string, string][]
declare namespace TTupleArray {
  const __is_atscript_annotated_type: true
  const type: TAtscriptTypeArray
  const metadata: TMetadataMap<AtscriptMetadata>
  static validator: <TT extends TAtscriptAnnotatedTypeConstructor = TTupleArray>(opts?: TValidatorOptions) => Validator<TT>
}

/**
 * Atscript type **TArray**
 * @see {@link ./type.as:15:13}
 */
export type TArray = string[]
declare namespace TArray {
  const __is_atscript_annotated_type: true
  const type: TAtscriptTypeArray
  const metadata: TMetadataMap<AtscriptMetadata>
  static validator: <TT extends TAtscriptAnnotatedTypeConstructor = TArray>(opts?: TValidatorOptions) => Validator<TT>
}

/**
 * Atscript type **TArray2**
 * @see {@link ./type.as:17:13}
 */
export type TArray2 = string[][]
declare namespace TArray2 {
  const __is_atscript_annotated_type: true
  const type: TAtscriptTypeArray
  const metadata: TMetadataMap<AtscriptMetadata>
  static validator: <TT extends TAtscriptAnnotatedTypeConstructor = TArray2>(opts?: TValidatorOptions) => Validator<TT>
}

/**
 * Atscript type **TArray3**
 * @see {@link ./type.as:19:13}
 */
export type TArray3 = string[][][]
declare namespace TArray3 {
  const __is_atscript_annotated_type: true
  const type: TAtscriptTypeArray
  const metadata: TMetadataMap<AtscriptMetadata>
  static validator: <TT extends TAtscriptAnnotatedTypeConstructor = TArray3>(opts?: TValidatorOptions) => Validator<TT>
}

/**
 * Atscript type **TComplexArray**
 * @see {@link ./type.as:21:13}
 */
export type TComplexArray = (string | number)[]
declare namespace TComplexArray {
  const __is_atscript_annotated_type: true
  const type: TAtscriptTypeArray
  const metadata: TMetadataMap<AtscriptMetadata>
  static validator: <TT extends TAtscriptAnnotatedTypeConstructor = TComplexArray>(opts?: TValidatorOptions) => Validator<TT>
}

/**
 * Atscript type **TComplexArray2**
 * @see {@link ./type.as:23:13}
 */
export type TComplexArray2 = (string | number)[][]
declare namespace TComplexArray2 {
  const __is_atscript_annotated_type: true
  const type: TAtscriptTypeArray
  const metadata: TMetadataMap<AtscriptMetadata>
  static validator: <TT extends TAtscriptAnnotatedTypeConstructor = TComplexArray2>(opts?: TValidatorOptions) => Validator<TT>
}

/**
 * Atscript type **TComplexArray3**
 * @see {@link ./type.as:25:13}
 */
export type TComplexArray3 = (string | number)[][][]
declare namespace TComplexArray3 {
  const __is_atscript_annotated_type: true
  const type: TAtscriptTypeArray
  const metadata: TMetadataMap<AtscriptMetadata>
  static validator: <TT extends TAtscriptAnnotatedTypeConstructor = TComplexArray3>(opts?: TValidatorOptions) => Validator<TT>
}

/**
 * Atscript type **TComplexArray4**
 * @see {@link ./type.as:27:13}
 */
export type TComplexArray4 = string | number[]
declare namespace TComplexArray4 {
  const __is_atscript_annotated_type: true
  const type: TAtscriptTypeComplex
  const metadata: TMetadataMap<AtscriptMetadata>
  static validator: <TT extends TAtscriptAnnotatedTypeConstructor = TComplexArray4>(opts?: TValidatorOptions) => Validator<TT>
}

/**
 * Atscript type **TComplexArray5**
 * @see {@link ./type.as:29:13}
 */
export type TComplexArray5 = string[] | number
declare namespace TComplexArray5 {
  const __is_atscript_annotated_type: true
  const type: TAtscriptTypeComplex
  const metadata: TMetadataMap<AtscriptMetadata>
  static validator: <TT extends TAtscriptAnnotatedTypeConstructor = TComplexArray5>(opts?: TValidatorOptions) => Validator<TT>
}

/**
 * Atscript type **TObject**
 * @see {@link ./type.as:31:13}
 */
export type TObject = {
  prop1: string
  prop2?: number
  nested: {
    prop3: boolean
    prop4?: boolean
  }
}
declare namespace TObject {
  const __is_atscript_annotated_type: true
  const type: TAtscriptTypeObject<keyof TObject>
  const metadata: TMetadataMap<AtscriptMetadata>
  static validator: <TT extends TAtscriptAnnotatedTypeConstructor = TObject>(opts?: TValidatorOptions) => Validator<TT>
}

/**
 * Atscript type **TObjectUnion1**
 * @see {@link ./type.as:40:13}
 */
export type TObjectUnion1 = {
  a: "a"
} | string
declare namespace TObjectUnion1 {
  const __is_atscript_annotated_type: true
  const type: TAtscriptTypeComplex
  const metadata: TMetadataMap<AtscriptMetadata>
  static validator: <TT extends TAtscriptAnnotatedTypeConstructor = TObjectUnion1>(opts?: TValidatorOptions) => Validator<TT>
}

/**
 * Atscript type **TObjectUnion2**
 * @see {@link ./type.as:42:13}
 */
export type TObjectUnion2 = string | {
  a: "a"
}
declare namespace TObjectUnion2 {
  const __is_atscript_annotated_type: true
  const type: TAtscriptTypeComplex
  const metadata: TMetadataMap<AtscriptMetadata>
  static validator: <TT extends TAtscriptAnnotatedTypeConstructor = TObjectUnion2>(opts?: TValidatorOptions) => Validator<TT>
}

/**
 * Atscript type **TObjectIntersection**
 * @see {@link ./type.as:44:13}
 */
export type TObjectIntersection = {
  a: "a"
} & {
  b: "b"
}
declare namespace TObjectIntersection {
  const __is_atscript_annotated_type: true
  const type: TAtscriptTypeObject<keyof TObjectIntersection>
  const metadata: TMetadataMap<AtscriptMetadata>
  static validator: <TT extends TAtscriptAnnotatedTypeConstructor = TObjectIntersection>(opts?: TValidatorOptions) => Validator<TT>
}
// prettier-ignore-end